@page "/cows"
@page "/krowy"
@page "/cows/{SelectedCowID:int}"
@attribute [Authorize]

@inject ICowsViewModel CowsVM



<h1>Krowy</h1>
<p>Panel do zarządzania krowami, dodawanie nowych, przypiywanie do grup, dodawanie/edycja procesów laktacji</p>

@if (CowsVM.AddCowViewModel == null)
{
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <button type="button" class="btn btn-secondary btn-sm" @onclick="CowsVM.InitializeNewCowForm">Dodaj</button>
    </div>
}
@if (CowsVM.AddCowViewModel != null)
{
    <div class="alert alert-secondary mt-4" role="alert">
        <h1>Dodaj krowe</h1>
        <EditForm Model="@CowsVM.AddCowViewModel" OnValidSubmit="@CowsVM.AddNewCow">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" id="flexSwitchCheckChecked" @bind-Value="CowsVM.AddCowViewModel.IsFarmBorn" />
                <label class="form-check-label" for="flexSwitchCheckChecked">Dodaj jako ciele</label>
            </div>

            <div class="form-floating">
                <InputNumber type="number" class="form-control" placeholder="hack" @bind-Value="CowsVM.AddCowViewModel.NameOnFarm" />
                <label>ID</label>
            </div>

            <div class="form-floating">
                <InputNumber type="number" class="form-control" placeholder="hack" @bind-Value="CowsVM.AddCowViewModel.EarringNumber" />
                <label>Numer kolczyka</label>
            </div>

            <div class="form-floating">
                <InputNumber type="number" class="form-control" placeholder="hack" @bind-Value="CowsVM.AddCowViewModel.TransponderNumber" />
                <label>Numer transpordera</label>
            </div>

            <div class="form-floating">
                <InputDate type="date" class="form-control" placeholder="hack" @bind-Value="CowsVM.AddCowViewModel.BirthDate" />
                <label>Data urodzenia</label>
            </div>

            <div class="form-floating">
                <InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="CowsVM.AddCowViewModel.FarmID">
                    <option value="">Wybierz farme</option>
                    @foreach (var farm in CowsVM.Farms)
                        {
                        <option value="@farm.FarmID">@farm.FarmName</option>
                        }
                </InputSelect>
                <label for="floatingSelect">Farma</label>
            </div>

            <div class="form-floating">
                <InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="CowsVM.AddCowViewModel.CowGroupID">
                    <option value="">Przypisz do grupy</option>
                    @foreach (var group in CowsVM.CowGroups)
                        {
                        <option value="@group.ID">@group.Name</option>
                        }
                </InputSelect>
                <label for="floatingSelect">Grupa</label>
            </div>

            @*WAŻNE!! jeśli chcesz dodać dodatkowy button wewnątrz form który ma uruchomić inną metoda niż submit - musi być Type="button" inaczej będzie go traktować jako submit *@
            <h4>Laktacje</h4><button Type="button" class="btn btn-secondary btn-sm" @onclick="CowsVM.AddNewCowNewLactation">Dodaj laktacje</button>

            @foreach (var lactations in CowsVM.AddCowViewModel.LactationsViewModels.Select((value, index) => new { value, index }))
            {
                

                <div class="alert alert-secondary mt-4" role="alert">
                    <p>Laktacja nr. @(lactations.index + 1) </p>

                <div class="row">
                    <div class="col-6">                      
                        <div class="form-floating">
                            <InputDate type="date" class="form-control" placeholder="hack" @bind-Value="lactations.value.From" />
                            <label>Data rozpoczęcia laktacji</label>
                        </div>
                    </div>
                    <div class="col-6">
                          <div class="form-floating">
                            <InputDate type="date" class="form-control" placeholder="hack" @bind-Value="lactations.value.To" />
                            <label>Data ukończenia laktacji</label>
                        </div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-6">
                          <div class="form-floating">
                            <InputNumber type="number" class="form-control" placeholder="hack" @bind-Value="lactations.value.LitersCollected" />
                            <label>Liczba zebranych litrów mleka</label>
                        </div>
                    </div>
                  </div>
				</div>
                
            }

            <button type="submit" class="btn btn-secondary btn-sm">Zapisz</button>
            <button class="btn btn-secondary btn-sm" @onclick="CowsVM.CancelAddCowForm">Anuluj</button>
        </EditForm>
    </div>
}
@if (CowsVM.CowList == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
@if (CowsVM.CowList != null)
{
    <p>Filter:</p>
    <br />
    <input @bind="CowsVM.SearchFilter" @bind:event="oninput" />

    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Liczba laktacji</th>
                <th scope="col">ID farmy </th>
                <th scope="col">ID matki</th>
                <th scope="col">Wiek w dniach</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cow in CowsVM.CowList)
            {
                <tr class="bg-hover-white-smoke w-100 pointer" @onclick="() => OnClickTest(cow.ID)">
                    <th scope="row"> @cow.NameOnFarm </th>
                    <td> @cow.LactationCount </td>
                    <td> @cow.FarmID </td>
                    <td> @cow.ParentID </td>
                    <td> @cow.AgeDisplay </td>
                </tr>
            }


        </tbody>
    </table>

    @*paginacja*@
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-end pagination-sm">
            <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
}
@if (CowsVM.SelectedCowViewModel != null)
{
    <p>Krowie detale: @CowsVM.SelectedCowViewModel.ID, @CowsVM.SelectedCowViewModel.FarmName, @CowsVM.SelectedCowViewModel.IsFemale, @CowsVM.SelectedCowViewModel.LactationCount, ... </p>
}

@code {
    [Parameter]
    public int? SelectedCowID { get; set; }

    void OnClickTest(int cowID)
    {
        var koko = 123;
    }


    public override Task SetParametersAsync(ParameterView parameters)
    {
        //called as first method called when page load, before parameters are set, it happends each time we set params (not once like init)
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnInitializedAsync()
    {
        //called second, after parameters are set, only once when page is initialized
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        //called each time when any of parameters is changes (set from other page or from same) - https://youtu.be/Rp-UDNLqZEc?t=1304
        return base.OnParametersSetAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        //called as last
        return base.OnAfterRenderAsync(firstRender);
    }
}
