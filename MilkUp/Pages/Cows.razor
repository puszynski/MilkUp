@page "/cows"
@page "/krowy"
@page "/cows/{SelectedCowID:int}"
@attribute [Authorize]

@inject ICowsViewModel CowsVM



<h1>Krowy</h1>
<p>Panel do zarządzania krowami, dodawanie nowych, przypiywanie do grup, dodawanie/edycja procesów laktacji</p>

<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <a href="/addcow" type="button" class="btn btn-secondary btn-sm">Dodaj</a>
</div>

@if (CowsVM.CowList == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Trwa ładowanie strony...</span>
        </div>
    </div>
}
@if (CowsVM.CowList != null)
{
    <p>Filter:</p>
    <br />
    <input @bind="CowsVM.SearchFilter" @bind:event="oninput" />

    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Liczba laktacji</th>
                <th scope="col">ID farmy </th>
                <th scope="col">ID matki</th>
                <th scope="col">Wiek w dniach</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cow in CowsVM.CowList)
            {
                <tr class="bg-hover-white-smoke w-100 pointer" @onclick="() => OnClickTest(cow.ID)">
                    <th scope="row"> @cow.NameOnFarm </th>
                    <td> @cow.LactationCount </td>
                    <td> @cow.FarmID </td>
                    <td> @cow.ParentID </td>
                    <td> @cow.AgeDisplay </td>
                </tr>
            }


        </tbody>
    </table>

    @*paginacja*@
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-end pagination-sm">
            <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
}
@if (CowsVM.SelectedCowViewModel != null)
{
    <p>Krowie detale: @CowsVM.SelectedCowViewModel.ID, @CowsVM.SelectedCowViewModel.FarmName, @CowsVM.SelectedCowViewModel.IsFemale, @CowsVM.SelectedCowViewModel.LactationCount, ... </p>
}

@code {
    [Parameter]
    public int? SelectedCowID { get; set; }

    void OnClickTest(int cowID)
    {
        var koko = 123;
    }


    public override Task SetParametersAsync(ParameterView parameters)
    {
        //called as first method called when page load, before parameters are set, it happends each time we set params (not once like init)
        return base.SetParametersAsync(parameters);
    }

    protected override Task OnInitializedAsync()
    {
        //called second, after parameters are set, only once when page is initialized

        CowsVM.InitializeViewModel();//DUPA BUG nie odświeża wyniku po przekierowaniu
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        //called each time when any of parameters is changes (set from other page or from same) - https://youtu.be/Rp-UDNLqZEc?t=1304
        return base.OnParametersSetAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        //called as last
        return base.OnAfterRenderAsync(firstRender);
    }
}
